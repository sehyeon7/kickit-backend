"""
Django settings for kickit project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import os, environ
import json
import boto3
from firebase_admin import credentials, initialize_app
from botocore.exceptions import ClientError

env = environ.Env(
    DEBUG=(bool, True)
)

environ.Env.read_env(
    env_file=os.path.join(BASE_DIR, '.env')
)

import firebase_admin
from firebase_admin import credentials

# FIREBASE_CREDENTIALS_PATH = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "kickit/snulife-international-firebase-adminsdk-fbsvc-44bb43dfba.json")
# cred = credentials.Certificate(FIREBASE_CREDENTIALS_PATH)
FIREBASE_PROJECT_ID = os.getenv("FIREBASE_PROJECT_ID")
# firebase_admin.initialize_app(cred)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
SUPABASE_URL = os.environ.get('SUPABASE_URL')
SUPABASE_ANON_PUBLIC_KEY = os.environ.get('SUPABASE_ANON_PUBLIC_KEY')
SUPABASE_SERVICE_ROLE_KEY = os.environ.get('SUPABASE_SERVICE_ROLE_KEY')
SUPABASE_BUCKET = os.environ.get('SUPABASE_BUCKET')
# SUPABASE_URL = env('SUPABASE_URL')
# SUPABASE_ANON_PUBLIC_KEY = env('SUPABASE_ANON_PUBLIC_KEY')
# SUPABASE_SERVICE_ROLE_KEY = env('SUPABASE_SERVICE_ROLE_KEY')
# SUPABASE_BUCKET = env('SUPABASE_BUCKET')

# SECRET_NAME = os.environ.get('FIREBASE_SECRET_NAME') 
REGION_NAME = "ap-northeast-2" 

import base64
# Base64 인코딩된 Firebase 자격 증명 문자열을 환경 변수에서 읽어오기
firebase_creds_b64 = os.getenv("FIREBASE_CREDENTIALS_B64")

if firebase_creds_b64:
    try:
        # Base64 디코딩하여 JSON 문자열로 변환
        json_str = base64.b64decode(firebase_creds_b64).decode('utf-8')
        # JSON 문자열을 dict로 파싱
        firebase_creds_dict = json.loads(json_str)
        # Firebase 인증서 초기화
        cred = credentials.Certificate(firebase_creds_dict)
        firebase_admin.initialize_app(cred)
        print("Firebase Admin 초기화 성공")
    except Exception as e:
        print("Base64 자격 증명으로 Firebase Admin 초기화 실패:", e)
else:
    print("환경 변수 FIREBASE_CREDENTIALS_B64에 Firebase 자격 증명이 설정되어 있지 않습니다.")

# def get_firebase_creds():
#     session = boto3.session.Session()
#     client = session.client(service_name='secretsmanager', region_name=REGION_NAME)
#     try:
#         resp = client.get_secret_value(SecretId=SECRET_NAME)
#         secret_string = resp['SecretString']
#         return json.loads(secret_string)
#     except ClientError as e:
#         # 로깅 혹은 예외처리
#         raise e

# Firebase 자격 증명 가져오기
# try:
#     firebase_cred_dict = get_firebase_creds()
#     cred = credentials.Certificate(firebase_cred_dict)  # dict 형태로 Certificate 생성
#     initialize_app(cred)
# except Exception as e:
#     print("Failed to initialize Firebase Admin:", e)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # External
    "rest_framework",
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    # Internal
    'corsheaders',
    'apps.account',
    'apps.notification',
    'apps.board',
    'apps.settings_app',
    'fcm_django',
    'apps.firebase',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'kickit.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kickit.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

pw = os.environ.get('SUPABASE_PASSWORD')
host = os.environ.get('SUPABASE_HOST')
user =  os.environ.get('SUPABASE_USER')
name = os.environ.get('SUPABASE_NAME')
host = os.environ.get('SUPABASE_HOST')
port = os.environ.get('SUPABASE_PORT')

# pw = env('SUPABASE_PASSWORD')
# host = env('SUPABASE_HOST')
# user =  env('SUPABASE_USER')
# name = env('SUPABASE_NAME')
# host = env('SUPABASE_HOST')
# port = env('SUPABASE_PORT')

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': name,
        'USER': user,
        'PASSWORD': pw, 
        'HOST': host,
        'PORT': port,
        'CERT' : 'kickit.prod-ca-2021.crt',
    },
}
DATABASE_ROUTERS = ['kickit.routers.CustomRouter']

# Static & Media
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_URL = '/media/'


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES' : (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': ( 
        'rest_framework_simplejwt.authentication.JWTAuthentication', 
    ),
}

# CORS
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

from datetime import timedelta 
REST_USE_JWT = True 
SIMPLE_JWT = {  'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30), 
                'REFRESH_TOKEN_LIFETIME': timedelta(days=1), 
                'ROTATE_REFRESH_TOKENS': True, 
                'BLACKLIST_AFTER_ROTATION': True, 
                'AUTH_HEADER_TYPES': ('Bearer', ), 
                'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken', ), 
                'ACCESS_TOKEN': 'access_token', 
                'REFRESH_TOKEN': 'refresh_token', 
                "JWT_COOKIE_SAMESITE": "None",
                'AUTH_COOKIE': 'access_token',
                'AUTH_COOKIE_REFRESH': 'refresh_token',
                'AUTH_COOKIE_DOMAIN': None,
                'AUTH_COOKIE_SECURE': True,
                'AUTH_COOKIE_HTTP_ONLY': True,
                'AUTH_COOKIE_PATH': '/',
                'AUTH_COOKIE_SAMESITE': 'None',
            }

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # 기본 username 기반 인증
    'apps.account.auth_backends.EmailAuthBackend',  # 추가한 이메일 기반 인증
]
